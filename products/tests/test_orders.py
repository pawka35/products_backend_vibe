import requests
import json

BASE_URL = "http://localhost:8000"

def test_orders_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞–∫–∞–∑–æ–≤"""
    
    print("–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞–∫–∞–∑–æ–≤ FastAPI")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞...")
    customer_data = {
        "username": "customer1",
        "email": "customer1@example.com",
        "password": "customer123",
        "role": "customer"
    }
    
    response = requests.post(f"{BASE_URL}/auth/register", json=customer_data)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {response.text}")
        return
    
    customer = response.json()
    print(f"   –ó–∞–∫–∞–∑—á–∏–∫ —Å–æ–∑–¥–∞–Ω: {customer['username']}")
    
    # 2. –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...")
    executor_data = {
        "username": "executor1",
        "email": "executor1@example.com",
        "password": "executor123",
        "role": "executor"
    }
    
    response = requests.post(f"{BASE_URL}/auth/register", json=executor_data)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {response.text}")
        return
    
    executor = response.json()
    print(f"   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {executor['username']}")
    
    # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞...")
    customer_login = {
        "username": "customer1",
        "password": "customer123"
    }
    
    response = requests.post(f"{BASE_URL}/auth/token", data=customer_login)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞: {response.text}")
        return
    
    customer_token = response.json()["access_token"]
    customer_headers = {"Authorization": f"Bearer {customer_token}"}
    print("   –¢–æ–∫–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω")
    
    # 4. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
    order_data = {
        "products": [
            {
                "name": "–•–ª–µ–±",
                "quantity": 2,
                "notes": "–°–≤–µ–∂–∏–π –±–µ–ª—ã–π —Ö–ª–µ–±"
            },
            {
                "name": "–ú–æ–ª–æ–∫–æ",
                "quantity": 1,
                "notes": "3.2% –∂–∏—Ä–Ω–æ—Å—Ç–∏"
            },
            {
                "name": "–Ø–±–ª–æ–∫–∏",
                "quantity": 5,
                "notes": "–ö—Ä–∞—Å–Ω—ã–µ, —Å–ª–∞–¥–∫–∏–µ"
            }
        ]
    }
    
    response = requests.post(f"{BASE_URL}/orders/", json=order_data, headers=customer_headers)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.text}")
        return
    
    order = response.json()
    order_id = order["id"]
    print(f"   –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: {order_id}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(order['products'])}")
    
    # 5. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    print("\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...")
    executor_login = {
        "username": "executor1",
        "password": "executor123"
    }
    
    response = requests.post(f"{BASE_URL}/auth/token", data=executor_login)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {response.text}")
        return
    
    executor_token = response.json()["access_token"]
    executor_headers = {"Authorization": f"Bearer {executor_token}"}
    print("   –¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω")
    
    # 6. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    print("\n6. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º...")
    response = requests.get(f"{BASE_URL}/executor/orders", headers=executor_headers)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {response.text}")
        return
    
    available_orders = response.json()
    print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(available_orders)}")
    
    # 7. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    print("\n7. –ù–∞—á–∞–ª–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞...")
    response = requests.put(f"{BASE_URL}/executor/orders/{order_id}/start", headers=executor_headers)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {response.text}")
        return
    
    print("   –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'")
    
    # 8. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–º–µ—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ
    print("\n8. –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    response = requests.get(f"{BASE_URL}/executor/orders/{order_id}", headers=executor_headers)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {response.text}")
        return
    
    order_details = response.json()
    
    for i, product in enumerate(order_details["products"]):
        print(f"   –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç '{product['name']}' –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π...")
        purchase_data = {
            "is_purchased": True,
            "notes": f"–ö—É–ø–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º {executor['username']}"
        }
        
        response = requests.put(
            f"{BASE_URL}/executor/products/{product['id']}/purchase", 
            json=purchase_data, 
            headers=executor_headers
        )
        
        if response.status_code != 200:
            print(f"     –û—à–∏–±–∫–∞: {response.text}")
        else:
            print(f"     –ü—Ä–æ–¥—É–∫—Ç '{product['name']}' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π")
    
    # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    print("\n9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞...")
    response = requests.get(f"{BASE_URL}/orders/{order_id}/summary", headers=customer_headers)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {response.text}")
        return
    
    summary = response.json()
    print(f"   –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {summary['status']}")
    print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {summary['total_products']}")
    print(f"   –ö—É–ø–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {summary['purchased_products']}")
    print(f"   –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å: {summary['is_completable']}")
    
    # 10. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
    print("\n10. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
    response = requests.put(f"{BASE_URL}/executor/orders/{order_id}/complete", headers=executor_headers)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.text}")
        return
    
    print("   –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    # 11. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n11. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    response = requests.get(f"{BASE_URL}/orders/{order_id}", headers=customer_headers)
    if response.status_code != 200:
        print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.text}")
        return
    
    final_order = response.json()
    print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {final_order['status']}")
    print(f"   –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {final_order['completed_at']}")
    
    print("\n" + "=" * 50)
    print("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ")

if __name__ == "__main__":
    test_orders_functionality()
